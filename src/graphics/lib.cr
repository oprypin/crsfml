require "../common"
require "../window/lib"
require "../system/lib"
{% unless flag?(:win32) %}
@[Link("stdc++")]
{% end %}
@[Link("sfml-graphics")]
{% if flag?(:win32) %}
@[Link(ldflags: "\"#{__DIR__}\\ext.obj\"")]
{% else %}
@[Link(ldflags: "'#{__DIR__}/ext.o'")]
{% end %}
lib SFMLExt
  fun sfml_blendmode_allocate(result : Void**)
  fun sfml_blendmode_free(self : Void*)
  fun sfml_blendmode_initialize(self : Void*)
  fun sfml_blendmode_initialize_8xr8xrBw1(self : Void*, source_factor : LibC::Int, destination_factor : LibC::Int, blend_equation : LibC::Int)
  fun sfml_blendmode_initialize_8xr8xrBw18xr8xrBw1(self : Void*, color_source_factor : LibC::Int, color_destination_factor : LibC::Int, color_blend_equation : LibC::Int, alpha_source_factor : LibC::Int, alpha_destination_factor : LibC::Int, alpha_blend_equation : LibC::Int)
  fun sfml_blendmode_setcolorsrcfactor_8xr(self : Void*, color_src_factor : LibC::Int)
  fun sfml_blendmode_setcolordstfactor_8xr(self : Void*, color_dst_factor : LibC::Int)
  fun sfml_blendmode_setcolorequation_Bw1(self : Void*, color_equation : LibC::Int)
  fun sfml_blendmode_setalphasrcfactor_8xr(self : Void*, alpha_src_factor : LibC::Int)
  fun sfml_blendmode_setalphadstfactor_8xr(self : Void*, alpha_dst_factor : LibC::Int)
  fun sfml_blendmode_setalphaequation_Bw1(self : Void*, alpha_equation : LibC::Int)
  fun sfml_operator_eq_PG5PG5(left : Void*, right : Void*, result : Bool*)
  fun sfml_operator_ne_PG5PG5(left : Void*, right : Void*, result : Bool*)
  fun sfml_blendmode_initialize_PG5(self : Void*, copy : Void*)
  fun sfml_transform_allocate(result : Void**)
  fun sfml_transform_free(self : Void*)
  fun sfml_transform_initialize(self : Void*)
  fun sfml_transform_initialize_Bw9Bw9Bw9Bw9Bw9Bw9Bw9Bw9Bw9(self : Void*, a00 : LibC::Float, a01 : LibC::Float, a02 : LibC::Float, a10 : LibC::Float, a11 : LibC::Float, a12 : LibC::Float, a20 : LibC::Float, a21 : LibC::Float, a22 : LibC::Float)
  fun sfml_transform_getmatrix(self : Void*, result : LibC::Float**)
  fun sfml_transform_getinverse(self : Void*, result : Void*)
  fun sfml_transform_transformpoint_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float, result : Void*)
  fun sfml_transform_transformpoint_UU2(self : Void*, point : Void*, result : Void*)
  fun sfml_transform_transformrect_WPZ(self : Void*, rectangle : Void*, result : Void*)
  fun sfml_transform_combine_FPe(self : Void*, transform : Void*, result : Void*)
  fun sfml_transform_translate_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float, result : Void*)
  fun sfml_transform_translate_UU2(self : Void*, offset : Void*, result : Void*)
  fun sfml_transform_rotate_Bw9(self : Void*, angle : LibC::Float, result : Void*)
  fun sfml_transform_rotate_Bw9Bw9Bw9(self : Void*, angle : LibC::Float, center_x : LibC::Float, center_y : LibC::Float, result : Void*)
  fun sfml_transform_rotate_Bw9UU2(self : Void*, angle : LibC::Float, center : Void*, result : Void*)
  fun sfml_transform_scale_Bw9Bw9(self : Void*, scale_x : LibC::Float, scale_y : LibC::Float, result : Void*)
  fun sfml_transform_scale_Bw9Bw9Bw9Bw9(self : Void*, scale_x : LibC::Float, scale_y : LibC::Float, center_x : LibC::Float, center_y : LibC::Float, result : Void*)
  fun sfml_transform_scale_UU2(self : Void*, factors : Void*, result : Void*)
  fun sfml_transform_scale_UU2UU2(self : Void*, factors : Void*, center : Void*, result : Void*)
  fun sfml_operator_mul_FPeFPe(left : Void*, right : Void*, result : Void*)
  fun sfml_operator_mul_FPeUU2(left : Void*, right : Void*, result : Void*)
  fun sfml_operator_eq_FPeFPe(left : Void*, right : Void*, result : Bool*)
  fun sfml_operator_ne_FPeFPe(left : Void*, right : Void*, result : Bool*)
  fun sfml_transform_initialize_FPe(self : Void*, copy : Void*)
  fun sfml_renderstates_allocate(result : Void**)
  fun sfml_renderstates_free(self : Void*)
  fun sfml_renderstates_initialize(self : Void*)
  fun sfml_renderstates_initialize_PG5(self : Void*, blend_mode : Void*)
  fun sfml_renderstates_initialize_FPe(self : Void*, transform : Void*)
  fun sfml_renderstates_initialize_MXd(self : Void*, texture : Void*)
  fun sfml_renderstates_initialize_8P6(self : Void*, shader : Void*)
  fun sfml_renderstates_initialize_PG5FPeMXd8P6(self : Void*, blend_mode : Void*, transform : Void*, texture : Void*, shader : Void*)
  fun sfml_renderstates_setblendmode_CPE(self : Void*, blend_mode : Void*)
  fun sfml_renderstates_settransform_lbe(self : Void*, transform : Void*)
  fun sfml_renderstates_settexture_MXd(self : Void*, texture : Void*)
  fun sfml_renderstates_setshader_8P6(self : Void*, shader : Void*)
  fun sfml_renderstates_initialize_mi4(self : Void*, copy : Void*)
  fun sfml_drawable_allocate(result : Void**)
  fun sfml_drawable_free(self : Void*)
  fun sfml_transformable_allocate(result : Void**)
  fun sfml_transformable_free(self : Void*)
  fun sfml_transformable_initialize(self : Void*)
  fun sfml_transformable_finalize(self : Void*)
  fun sfml_transformable_setposition_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float)
  fun sfml_transformable_setposition_UU2(self : Void*, position : Void*)
  fun sfml_transformable_setrotation_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_transformable_setscale_Bw9Bw9(self : Void*, factor_x : LibC::Float, factor_y : LibC::Float)
  fun sfml_transformable_setscale_UU2(self : Void*, factors : Void*)
  fun sfml_transformable_setorigin_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float)
  fun sfml_transformable_setorigin_UU2(self : Void*, origin : Void*)
  fun sfml_transformable_getposition(self : Void*, result : Void*)
  fun sfml_transformable_getrotation(self : Void*, result : LibC::Float*)
  fun sfml_transformable_getscale(self : Void*, result : Void*)
  fun sfml_transformable_getorigin(self : Void*, result : Void*)
  fun sfml_transformable_move_Bw9Bw9(self : Void*, offset_x : LibC::Float, offset_y : LibC::Float)
  fun sfml_transformable_move_UU2(self : Void*, offset : Void*)
  fun sfml_transformable_rotate_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_transformable_scale_Bw9Bw9(self : Void*, factor_x : LibC::Float, factor_y : LibC::Float)
  fun sfml_transformable_scale_UU2(self : Void*, factor : Void*)
  fun sfml_transformable_gettransform(self : Void*, result : Void*)
  fun sfml_transformable_getinversetransform(self : Void*, result : Void*)
  fun sfml_transformable_initialize_dkg(self : Void*, copy : Void*)
  fun sfml_color_allocate(result : Void**)
  fun sfml_color_free(self : Void*)
  fun sfml_color_initialize(self : Void*)
  fun sfml_color_initialize_9yU9yU9yU9yU(self : Void*, red : UInt8, green : UInt8, blue : UInt8, alpha : UInt8)
  fun sfml_color_initialize_saL(self : Void*, color : UInt32)
  fun sfml_color_tointeger(self : Void*, result : UInt32*)
  fun sfml_color_setr_9yU(self : Void*, r : UInt8)
  fun sfml_color_setg_9yU(self : Void*, g : UInt8)
  fun sfml_color_setb_9yU(self : Void*, b : UInt8)
  fun sfml_color_seta_9yU(self : Void*, a : UInt8)
  fun sfml_operator_eq_QVeQVe(left : Void*, right : Void*, result : Bool*)
  fun sfml_operator_ne_QVeQVe(left : Void*, right : Void*, result : Bool*)
  fun sfml_operator_add_QVeQVe(left : Void*, right : Void*, result : Void*)
  fun sfml_operator_sub_QVeQVe(left : Void*, right : Void*, result : Void*)
  fun sfml_operator_mul_QVeQVe(left : Void*, right : Void*, result : Void*)
  fun sfml_color_initialize_QVe(self : Void*, copy : Void*)
  fun sfml_vertex_allocate(result : Void**)
  fun sfml_vertex_free(self : Void*)
  fun sfml_vertex_initialize(self : Void*)
  fun sfml_vertex_initialize_UU2(self : Void*, position : Void*)
  fun sfml_vertex_initialize_UU2QVe(self : Void*, position : Void*, color : Void*)
  fun sfml_vertex_initialize_UU2UU2(self : Void*, position : Void*, tex_coords : Void*)
  fun sfml_vertex_initialize_UU2QVeUU2(self : Void*, position : Void*, color : Void*, tex_coords : Void*)
  fun sfml_vertex_setposition_llt(self : Void*, position : Void*)
  fun sfml_vertex_setcolor_9qU(self : Void*, color : Void*)
  fun sfml_vertex_settexcoords_llt(self : Void*, tex_coords : Void*)
  fun sfml_vertex_initialize_Y3J(self : Void*, copy : Void*)
  fun sfml_vertexarray_allocate(result : Void**)
  fun sfml_vertexarray_finalize(self : Void*)
  fun sfml_vertexarray_free(self : Void*)
  fun sfml_vertexarray_initialize(self : Void*)
  fun sfml_vertexarray_initialize_u9wvgv(self : Void*, type : LibC::Int, vertex_count : LibC::SizeT)
  fun sfml_vertexarray_getvertexcount(self : Void*, result : LibC::SizeT*)
  fun sfml_vertexarray_operator_indexset_vgvRos(self : Void*, index : LibC::SizeT, value : Void*)
  fun sfml_vertexarray_operator_index_vgv(self : Void*, index : LibC::SizeT, result : Void*)
  fun sfml_vertexarray_clear(self : Void*)
  fun sfml_vertexarray_resize_vgv(self : Void*, vertex_count : LibC::SizeT)
  fun sfml_vertexarray_append_Y3J(self : Void*, vertex : Void*)
  fun sfml_vertexarray_setprimitivetype_u9w(self : Void*, type : LibC::Int)
  fun sfml_vertexarray_getprimitivetype(self : Void*, result : LibC::Int*)
  fun sfml_vertexarray_getbounds(self : Void*, result : Void*)
  fun sfml_vertexarray_draw_kb9RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_vertexarray_draw_fqURoT(self : Void*, target : Void*, states : Void*)
  fun sfml_vertexarray_draw_Xk1RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_vertexarray_initialize_EXB(self : Void*, copy : Void*)
  fun sfml_shape_getpointcount_callback(callback : (Void*, LibC::SizeT* ->))
  fun sfml_shape_getpoint_callback(callback : (Void*, LibC::SizeT, Void* ->))
  fun sfml_shape_parent(self : Void*, parent : Void*)
  fun sfml_shape_allocate(result : Void**)
  fun sfml_shape_free(self : Void*)
  fun sfml_shape_finalize(self : Void*)
  fun sfml_shape_settexture_MXdGZq(self : Void*, texture : Void*, reset_rect : Bool)
  fun sfml_shape_settexturerect_2k1(self : Void*, rect : Void*)
  fun sfml_shape_setfillcolor_QVe(self : Void*, color : Void*)
  fun sfml_shape_setoutlinecolor_QVe(self : Void*, color : Void*)
  fun sfml_shape_setoutlinethickness_Bw9(self : Void*, thickness : LibC::Float)
  fun sfml_shape_gettexture(self : Void*, result : Void**)
  fun sfml_shape_gettexturerect(self : Void*, result : Void*)
  fun sfml_shape_getfillcolor(self : Void*, result : Void*)
  fun sfml_shape_getoutlinecolor(self : Void*, result : Void*)
  fun sfml_shape_getoutlinethickness(self : Void*, result : LibC::Float*)
  fun sfml_shape_getlocalbounds(self : Void*, result : Void*)
  fun sfml_shape_getglobalbounds(self : Void*, result : Void*)
  fun sfml_shape_initialize(self : Void*)
  fun sfml_shape_update(self : Void*)
  fun sfml_shape_setposition_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float)
  fun sfml_shape_setposition_UU2(self : Void*, position : Void*)
  fun sfml_shape_setrotation_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_shape_setscale_Bw9Bw9(self : Void*, factor_x : LibC::Float, factor_y : LibC::Float)
  fun sfml_shape_setscale_UU2(self : Void*, factors : Void*)
  fun sfml_shape_setorigin_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float)
  fun sfml_shape_setorigin_UU2(self : Void*, origin : Void*)
  fun sfml_shape_getposition(self : Void*, result : Void*)
  fun sfml_shape_getrotation(self : Void*, result : LibC::Float*)
  fun sfml_shape_getscale(self : Void*, result : Void*)
  fun sfml_shape_getorigin(self : Void*, result : Void*)
  fun sfml_shape_move_Bw9Bw9(self : Void*, offset_x : LibC::Float, offset_y : LibC::Float)
  fun sfml_shape_move_UU2(self : Void*, offset : Void*)
  fun sfml_shape_rotate_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_shape_scale_Bw9Bw9(self : Void*, factor_x : LibC::Float, factor_y : LibC::Float)
  fun sfml_shape_scale_UU2(self : Void*, factor : Void*)
  fun sfml_shape_gettransform(self : Void*, result : Void*)
  fun sfml_shape_getinversetransform(self : Void*, result : Void*)
  fun sfml_shape_draw_kb9RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_shape_draw_fqURoT(self : Void*, target : Void*, states : Void*)
  fun sfml_shape_draw_Xk1RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_circleshape_allocate(result : Void**)
  fun sfml_circleshape_finalize(self : Void*)
  fun sfml_circleshape_free(self : Void*)
  fun sfml_circleshape_initialize_Bw9vgv(self : Void*, radius : LibC::Float, point_count : LibC::SizeT)
  fun sfml_circleshape_setradius_Bw9(self : Void*, radius : LibC::Float)
  fun sfml_circleshape_getradius(self : Void*, result : LibC::Float*)
  fun sfml_circleshape_setpointcount_vgv(self : Void*, count : LibC::SizeT)
  fun sfml_circleshape_getpointcount(self : Void*, result : LibC::SizeT*)
  fun sfml_circleshape_getpoint_vgv(self : Void*, index : LibC::SizeT, result : Void*)
  fun sfml_circleshape_settexture_MXdGZq(self : Void*, texture : Void*, reset_rect : Bool)
  fun sfml_circleshape_settexturerect_2k1(self : Void*, rect : Void*)
  fun sfml_circleshape_setfillcolor_QVe(self : Void*, color : Void*)
  fun sfml_circleshape_setoutlinecolor_QVe(self : Void*, color : Void*)
  fun sfml_circleshape_setoutlinethickness_Bw9(self : Void*, thickness : LibC::Float)
  fun sfml_circleshape_gettexture(self : Void*, result : Void**)
  fun sfml_circleshape_gettexturerect(self : Void*, result : Void*)
  fun sfml_circleshape_getfillcolor(self : Void*, result : Void*)
  fun sfml_circleshape_getoutlinecolor(self : Void*, result : Void*)
  fun sfml_circleshape_getoutlinethickness(self : Void*, result : LibC::Float*)
  fun sfml_circleshape_getlocalbounds(self : Void*, result : Void*)
  fun sfml_circleshape_getglobalbounds(self : Void*, result : Void*)
  fun sfml_circleshape_setposition_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float)
  fun sfml_circleshape_setposition_UU2(self : Void*, position : Void*)
  fun sfml_circleshape_setrotation_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_circleshape_setscale_Bw9Bw9(self : Void*, factor_x : LibC::Float, factor_y : LibC::Float)
  fun sfml_circleshape_setscale_UU2(self : Void*, factors : Void*)
  fun sfml_circleshape_setorigin_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float)
  fun sfml_circleshape_setorigin_UU2(self : Void*, origin : Void*)
  fun sfml_circleshape_getposition(self : Void*, result : Void*)
  fun sfml_circleshape_getrotation(self : Void*, result : LibC::Float*)
  fun sfml_circleshape_getscale(self : Void*, result : Void*)
  fun sfml_circleshape_getorigin(self : Void*, result : Void*)
  fun sfml_circleshape_move_Bw9Bw9(self : Void*, offset_x : LibC::Float, offset_y : LibC::Float)
  fun sfml_circleshape_move_UU2(self : Void*, offset : Void*)
  fun sfml_circleshape_rotate_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_circleshape_scale_Bw9Bw9(self : Void*, factor_x : LibC::Float, factor_y : LibC::Float)
  fun sfml_circleshape_scale_UU2(self : Void*, factor : Void*)
  fun sfml_circleshape_gettransform(self : Void*, result : Void*)
  fun sfml_circleshape_getinversetransform(self : Void*, result : Void*)
  fun sfml_circleshape_draw_kb9RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_circleshape_draw_fqURoT(self : Void*, target : Void*, states : Void*)
  fun sfml_circleshape_draw_Xk1RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_circleshape_initialize_Ii7(self : Void*, copy : Void*)
  fun sfml_convexshape_allocate(result : Void**)
  fun sfml_convexshape_finalize(self : Void*)
  fun sfml_convexshape_free(self : Void*)
  fun sfml_convexshape_initialize_vgv(self : Void*, point_count : LibC::SizeT)
  fun sfml_convexshape_setpointcount_vgv(self : Void*, count : LibC::SizeT)
  fun sfml_convexshape_getpointcount(self : Void*, result : LibC::SizeT*)
  fun sfml_convexshape_setpoint_vgvUU2(self : Void*, index : LibC::SizeT, point : Void*)
  fun sfml_convexshape_getpoint_vgv(self : Void*, index : LibC::SizeT, result : Void*)
  fun sfml_convexshape_settexture_MXdGZq(self : Void*, texture : Void*, reset_rect : Bool)
  fun sfml_convexshape_settexturerect_2k1(self : Void*, rect : Void*)
  fun sfml_convexshape_setfillcolor_QVe(self : Void*, color : Void*)
  fun sfml_convexshape_setoutlinecolor_QVe(self : Void*, color : Void*)
  fun sfml_convexshape_setoutlinethickness_Bw9(self : Void*, thickness : LibC::Float)
  fun sfml_convexshape_gettexture(self : Void*, result : Void**)
  fun sfml_convexshape_gettexturerect(self : Void*, result : Void*)
  fun sfml_convexshape_getfillcolor(self : Void*, result : Void*)
  fun sfml_convexshape_getoutlinecolor(self : Void*, result : Void*)
  fun sfml_convexshape_getoutlinethickness(self : Void*, result : LibC::Float*)
  fun sfml_convexshape_getlocalbounds(self : Void*, result : Void*)
  fun sfml_convexshape_getglobalbounds(self : Void*, result : Void*)
  fun sfml_convexshape_setposition_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float)
  fun sfml_convexshape_setposition_UU2(self : Void*, position : Void*)
  fun sfml_convexshape_setrotation_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_convexshape_setscale_Bw9Bw9(self : Void*, factor_x : LibC::Float, factor_y : LibC::Float)
  fun sfml_convexshape_setscale_UU2(self : Void*, factors : Void*)
  fun sfml_convexshape_setorigin_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float)
  fun sfml_convexshape_setorigin_UU2(self : Void*, origin : Void*)
  fun sfml_convexshape_getposition(self : Void*, result : Void*)
  fun sfml_convexshape_getrotation(self : Void*, result : LibC::Float*)
  fun sfml_convexshape_getscale(self : Void*, result : Void*)
  fun sfml_convexshape_getorigin(self : Void*, result : Void*)
  fun sfml_convexshape_move_Bw9Bw9(self : Void*, offset_x : LibC::Float, offset_y : LibC::Float)
  fun sfml_convexshape_move_UU2(self : Void*, offset : Void*)
  fun sfml_convexshape_rotate_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_convexshape_scale_Bw9Bw9(self : Void*, factor_x : LibC::Float, factor_y : LibC::Float)
  fun sfml_convexshape_scale_UU2(self : Void*, factor : Void*)
  fun sfml_convexshape_gettransform(self : Void*, result : Void*)
  fun sfml_convexshape_getinversetransform(self : Void*, result : Void*)
  fun sfml_convexshape_draw_kb9RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_convexshape_draw_fqURoT(self : Void*, target : Void*, states : Void*)
  fun sfml_convexshape_draw_Xk1RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_convexshape_initialize_Ydx(self : Void*, copy : Void*)
  fun sfml_glyph_allocate(result : Void**)
  fun sfml_glyph_free(self : Void*)
  fun sfml_glyph_initialize(self : Void*)
  fun sfml_glyph_setadvance_Bw9(self : Void*, advance : LibC::Float)
  fun sfml_glyph_setlsbdelta_2mh(self : Void*, lsb_delta : LibC::Int)
  fun sfml_glyph_setrsbdelta_2mh(self : Void*, rsb_delta : LibC::Int)
  fun sfml_glyph_setbounds_5MC(self : Void*, bounds : Void*)
  fun sfml_glyph_settexturerect_POq(self : Void*, texture_rect : Void*)
  fun sfml_glyph_initialize_UlF(self : Void*, copy : Void*)
  fun sfml_image_allocate(result : Void**)
  fun sfml_image_free(self : Void*)
  fun sfml_image_initialize(self : Void*)
  fun sfml_image_finalize(self : Void*)
  fun sfml_image_create_emSemSQVe(self : Void*, width : LibC::UInt, height : LibC::UInt, color : Void*)
  fun sfml_image_create_emSemS843(self : Void*, width : LibC::UInt, height : LibC::UInt, pixels : UInt8*)
  fun sfml_image_loadfromfile_zkC(self : Void*, filename_size : LibC::SizeT, filename : LibC::Char*, result : Bool*)
  fun sfml_image_loadfrommemory_5h8vgv(self : Void*, data : UInt8*, size : LibC::SizeT, result : Bool*)
  fun sfml_image_loadfromstream_PO0(self : Void*, stream : Void*, result : Bool*)
  fun sfml_image_savetofile_zkC(self : Void*, filename_size : LibC::SizeT, filename : LibC::Char*, result : Bool*)
  fun sfml_image_savetomemory_AoazkC(self : Void*, output : Void*, format_size : LibC::SizeT, format : LibC::Char*, result : Bool*)
  fun sfml_image_getsize(self : Void*, result : Void*)
  fun sfml_image_createmaskfromcolor_QVe9yU(self : Void*, color : Void*, alpha : UInt8)
  fun sfml_image_copy_dptemSemS2k1GZq(self : Void*, source : Void*, dest_x : LibC::UInt, dest_y : LibC::UInt, source_rect : Void*, apply_alpha : Bool)
  fun sfml_image_setpixel_emSemSQVe(self : Void*, x : LibC::UInt, y : LibC::UInt, color : Void*)
  fun sfml_image_getpixel_emSemS(self : Void*, x : LibC::UInt, y : LibC::UInt, result : Void*)
  fun sfml_image_getpixelsptr(self : Void*, result : UInt8**)
  fun sfml_image_fliphorizontally(self : Void*)
  fun sfml_image_flipvertically(self : Void*)
  fun sfml_image_initialize_dpt(self : Void*, copy : Void*)
  fun sfml_texture_allocate(result : Void**)
  fun sfml_texture_free(self : Void*)
  fun sfml_texture_initialize(self : Void*)
  fun sfml_texture_finalize(self : Void*)
  fun sfml_texture_create_emSemS(self : Void*, width : LibC::UInt, height : LibC::UInt, result : Bool*)
  fun sfml_texture_loadfromfile_zkC2k1(self : Void*, filename_size : LibC::SizeT, filename : LibC::Char*, area : Void*, result : Bool*)
  fun sfml_texture_loadfrommemory_5h8vgv2k1(self : Void*, data : UInt8*, size : LibC::SizeT, area : Void*, result : Bool*)
  fun sfml_texture_loadfromstream_PO02k1(self : Void*, stream : Void*, area : Void*, result : Bool*)
  fun sfml_texture_loadfromimage_dpt2k1(self : Void*, image : Void*, area : Void*, result : Bool*)
  fun sfml_texture_getsize(self : Void*, result : Void*)
  fun sfml_texture_copytoimage(self : Void*, result : Void*)
  fun sfml_texture_update_843(self : Void*, pixels : UInt8*)
  fun sfml_texture_update_843emSemSemSemS(self : Void*, pixels : UInt8*, width : LibC::UInt, height : LibC::UInt, x : LibC::UInt, y : LibC::UInt)
  fun sfml_texture_update_DJb(self : Void*, texture : Void*)
  fun sfml_texture_update_DJbemSemS(self : Void*, texture : Void*, x : LibC::UInt, y : LibC::UInt)
  fun sfml_texture_update_dpt(self : Void*, image : Void*)
  fun sfml_texture_update_dptemSemS(self : Void*, image : Void*, x : LibC::UInt, y : LibC::UInt)
  fun sfml_texture_update_JRh(self : Void*, window : Void*)
  fun sfml_texture_update_JRhemSemS(self : Void*, window : Void*, x : LibC::UInt, y : LibC::UInt)
  fun sfml_texture_setsmooth_GZq(self : Void*, smooth : Bool)
  fun sfml_texture_issmooth(self : Void*, result : Bool*)
  fun sfml_texture_setsrgb_GZq(self : Void*, s_rgb : Bool)
  fun sfml_texture_issrgb(self : Void*, result : Bool*)
  fun sfml_texture_setrepeated_GZq(self : Void*, repeated : Bool)
  fun sfml_texture_isrepeated(self : Void*, result : Bool*)
  fun sfml_texture_generatemipmap(self : Void*, result : Bool*)
  fun sfml_texture_swap_zUT(self : Void*, right : Void*)
  fun sfml_texture_getnativehandle(self : Void*, result : LibC::UInt*)
  fun sfml_texture_bind_MXdK9j(texture : Void*, coordinate_type : LibC::Int)
  fun sfml_texture_getmaximumsize(result : LibC::UInt*)
  fun sfml_texture_initialize_DJb(self : Void*, copy : Void*)
  fun sfml_font_allocate(result : Void**)
  fun sfml_font_free(self : Void*)
  fun sfml_font_info_allocate(result : Void**)
  fun sfml_font_info_initialize(self : Void*)
  fun sfml_font_info_finalize(self : Void*)
  fun sfml_font_info_free(self : Void*)
  fun sfml_font_info_getfamily(self : Void*, result : LibC::Char**)
  fun sfml_font_info_setfamily_Fzm(self : Void*, family_size : LibC::SizeT, family : LibC::Char*)
  fun sfml_font_info_initialize_HPc(self : Void*, copy : Void*)
  fun sfml_font_initialize(self : Void*)
  fun sfml_font_finalize(self : Void*)
  fun sfml_font_loadfromfile_zkC(self : Void*, filename_size : LibC::SizeT, filename : LibC::Char*, result : Bool*)
  fun sfml_font_loadfrommemory_5h8vgv(self : Void*, data : UInt8*, size_in_bytes : LibC::SizeT, result : Bool*)
  fun sfml_font_loadfromstream_PO0(self : Void*, stream : Void*, result : Bool*)
  fun sfml_font_getinfo(self : Void*, result : Void**)
  fun sfml_font_getglyph_saLemSGZqBw9(self : Void*, code_point : UInt32, character_size : LibC::UInt, bold : Bool, outline_thickness : LibC::Float, result : Void*)
  fun sfml_font_hasglyph_saL(self : Void*, code_point : UInt32, result : Bool*)
  fun sfml_font_getkerning_saLsaLemSGZq(self : Void*, first : UInt32, second : UInt32, character_size : LibC::UInt, bold : Bool, result : LibC::Float*)
  fun sfml_font_getlinespacing_emS(self : Void*, character_size : LibC::UInt, result : LibC::Float*)
  fun sfml_font_getunderlineposition_emS(self : Void*, character_size : LibC::UInt, result : LibC::Float*)
  fun sfml_font_getunderlinethickness_emS(self : Void*, character_size : LibC::UInt, result : LibC::Float*)
  fun sfml_font_gettexture_emS(self : Void*, character_size : LibC::UInt, result : Void**)
  fun sfml_font_setsmooth_GZq(self : Void*, smooth : Bool)
  fun sfml_font_issmooth(self : Void*, result : Bool*)
  fun sfml_font_initialize_7CF(self : Void*, copy : Void*)
  fun sfml_rectangleshape_allocate(result : Void**)
  fun sfml_rectangleshape_finalize(self : Void*)
  fun sfml_rectangleshape_free(self : Void*)
  fun sfml_rectangleshape_initialize_UU2(self : Void*, size : Void*)
  fun sfml_rectangleshape_setsize_UU2(self : Void*, size : Void*)
  fun sfml_rectangleshape_getsize(self : Void*, result : Void*)
  fun sfml_rectangleshape_getpointcount(self : Void*, result : LibC::SizeT*)
  fun sfml_rectangleshape_getpoint_vgv(self : Void*, index : LibC::SizeT, result : Void*)
  fun sfml_rectangleshape_settexture_MXdGZq(self : Void*, texture : Void*, reset_rect : Bool)
  fun sfml_rectangleshape_settexturerect_2k1(self : Void*, rect : Void*)
  fun sfml_rectangleshape_setfillcolor_QVe(self : Void*, color : Void*)
  fun sfml_rectangleshape_setoutlinecolor_QVe(self : Void*, color : Void*)
  fun sfml_rectangleshape_setoutlinethickness_Bw9(self : Void*, thickness : LibC::Float)
  fun sfml_rectangleshape_gettexture(self : Void*, result : Void**)
  fun sfml_rectangleshape_gettexturerect(self : Void*, result : Void*)
  fun sfml_rectangleshape_getfillcolor(self : Void*, result : Void*)
  fun sfml_rectangleshape_getoutlinecolor(self : Void*, result : Void*)
  fun sfml_rectangleshape_getoutlinethickness(self : Void*, result : LibC::Float*)
  fun sfml_rectangleshape_getlocalbounds(self : Void*, result : Void*)
  fun sfml_rectangleshape_getglobalbounds(self : Void*, result : Void*)
  fun sfml_rectangleshape_setposition_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float)
  fun sfml_rectangleshape_setposition_UU2(self : Void*, position : Void*)
  fun sfml_rectangleshape_setrotation_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_rectangleshape_setscale_Bw9Bw9(self : Void*, factor_x : LibC::Float, factor_y : LibC::Float)
  fun sfml_rectangleshape_setscale_UU2(self : Void*, factors : Void*)
  fun sfml_rectangleshape_setorigin_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float)
  fun sfml_rectangleshape_setorigin_UU2(self : Void*, origin : Void*)
  fun sfml_rectangleshape_getposition(self : Void*, result : Void*)
  fun sfml_rectangleshape_getrotation(self : Void*, result : LibC::Float*)
  fun sfml_rectangleshape_getscale(self : Void*, result : Void*)
  fun sfml_rectangleshape_getorigin(self : Void*, result : Void*)
  fun sfml_rectangleshape_move_Bw9Bw9(self : Void*, offset_x : LibC::Float, offset_y : LibC::Float)
  fun sfml_rectangleshape_move_UU2(self : Void*, offset : Void*)
  fun sfml_rectangleshape_rotate_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_rectangleshape_scale_Bw9Bw9(self : Void*, factor_x : LibC::Float, factor_y : LibC::Float)
  fun sfml_rectangleshape_scale_UU2(self : Void*, factor : Void*)
  fun sfml_rectangleshape_gettransform(self : Void*, result : Void*)
  fun sfml_rectangleshape_getinversetransform(self : Void*, result : Void*)
  fun sfml_rectangleshape_draw_kb9RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_rectangleshape_draw_fqURoT(self : Void*, target : Void*, states : Void*)
  fun sfml_rectangleshape_draw_Xk1RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_rectangleshape_initialize_wlj(self : Void*, copy : Void*)
  fun sfml_view_allocate(result : Void**)
  fun sfml_view_finalize(self : Void*)
  fun sfml_view_free(self : Void*)
  fun sfml_view_initialize(self : Void*)
  fun sfml_view_initialize_WPZ(self : Void*, rectangle : Void*)
  fun sfml_view_initialize_UU2UU2(self : Void*, center : Void*, size : Void*)
  fun sfml_view_setcenter_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float)
  fun sfml_view_setcenter_UU2(self : Void*, center : Void*)
  fun sfml_view_setsize_Bw9Bw9(self : Void*, width : LibC::Float, height : LibC::Float)
  fun sfml_view_setsize_UU2(self : Void*, size : Void*)
  fun sfml_view_setrotation_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_view_setviewport_WPZ(self : Void*, viewport : Void*)
  fun sfml_view_reset_WPZ(self : Void*, rectangle : Void*)
  fun sfml_view_getcenter(self : Void*, result : Void*)
  fun sfml_view_getsize(self : Void*, result : Void*)
  fun sfml_view_getrotation(self : Void*, result : LibC::Float*)
  fun sfml_view_getviewport(self : Void*, result : Void*)
  fun sfml_view_move_Bw9Bw9(self : Void*, offset_x : LibC::Float, offset_y : LibC::Float)
  fun sfml_view_move_UU2(self : Void*, offset : Void*)
  fun sfml_view_rotate_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_view_zoom_Bw9(self : Void*, factor : LibC::Float)
  fun sfml_view_gettransform(self : Void*, result : Void*)
  fun sfml_view_getinversetransform(self : Void*, result : Void*)
  fun sfml_view_initialize_DDi(self : Void*, copy : Void*)
  fun sfml_rendertarget_allocate(result : Void**)
  fun sfml_rendertarget_free(self : Void*)
  fun sfml_rendertarget_clear_QVe(self : Void*, color : Void*)
  fun sfml_rendertarget_setview_DDi(self : Void*, view : Void*)
  fun sfml_rendertarget_getview(self : Void*, result : Void**)
  fun sfml_rendertarget_getdefaultview(self : Void*, result : Void**)
  fun sfml_rendertarget_getviewport_DDi(self : Void*, view : Void*, result : Void*)
  fun sfml_rendertarget_mappixeltocoords_ufV(self : Void*, point : Void*, result : Void*)
  fun sfml_rendertarget_mappixeltocoords_ufVDDi(self : Void*, point : Void*, view : Void*, result : Void*)
  fun sfml_rendertarget_mapcoordstopixel_UU2(self : Void*, point : Void*, result : Void*)
  fun sfml_rendertarget_mapcoordstopixel_UU2DDi(self : Void*, point : Void*, view : Void*, result : Void*)
  fun sfml_rendertarget_draw_46svgvu9wmi4(self : Void*, vertices : Void*, vertex_count : LibC::SizeT, type : LibC::Int, states : Void*)
  fun sfml_rendertarget_draw_U2Dmi4(self : Void*, vertex_buffer : Void*, states : Void*)
  fun sfml_rendertarget_draw_U2Dvgvvgvmi4(self : Void*, vertex_buffer : Void*, first_vertex : LibC::SizeT, vertex_count : LibC::SizeT, states : Void*)
  fun sfml_rendertarget_issrgb(self : Void*, result : Bool*)
  fun sfml_rendertarget_setactive_GZq(self : Void*, active : Bool, result : Bool*)
  fun sfml_rendertarget_pushglstates(self : Void*)
  fun sfml_rendertarget_popglstates(self : Void*)
  fun sfml_rendertarget_resetglstates(self : Void*)
  fun sfml_rendertexture_allocate(result : Void**)
  fun sfml_rendertexture_free(self : Void*)
  fun sfml_rendertexture_initialize(self : Void*)
  fun sfml_rendertexture_finalize(self : Void*)
  fun sfml_rendertexture_create_emSemSGZq(self : Void*, width : LibC::UInt, height : LibC::UInt, depth_buffer : Bool, result : Bool*)
  fun sfml_rendertexture_create_emSemSFw4(self : Void*, width : LibC::UInt, height : LibC::UInt, settings : Void*, result : Bool*)
  fun sfml_rendertexture_getmaximumantialiasinglevel(result : LibC::UInt*)
  fun sfml_rendertexture_setsmooth_GZq(self : Void*, smooth : Bool)
  fun sfml_rendertexture_issmooth(self : Void*, result : Bool*)
  fun sfml_rendertexture_setrepeated_GZq(self : Void*, repeated : Bool)
  fun sfml_rendertexture_isrepeated(self : Void*, result : Bool*)
  fun sfml_rendertexture_generatemipmap(self : Void*, result : Bool*)
  fun sfml_rendertexture_setactive_GZq(self : Void*, active : Bool, result : Bool*)
  fun sfml_rendertexture_display(self : Void*)
  fun sfml_rendertexture_getsize(self : Void*, result : Void*)
  fun sfml_rendertexture_issrgb(self : Void*, result : Bool*)
  fun sfml_rendertexture_gettexture(self : Void*, result : Void**)
  fun sfml_rendertexture_clear_QVe(self : Void*, color : Void*)
  fun sfml_rendertexture_setview_DDi(self : Void*, view : Void*)
  fun sfml_rendertexture_getview(self : Void*, result : Void**)
  fun sfml_rendertexture_getdefaultview(self : Void*, result : Void**)
  fun sfml_rendertexture_getviewport_DDi(self : Void*, view : Void*, result : Void*)
  fun sfml_rendertexture_mappixeltocoords_ufV(self : Void*, point : Void*, result : Void*)
  fun sfml_rendertexture_mappixeltocoords_ufVDDi(self : Void*, point : Void*, view : Void*, result : Void*)
  fun sfml_rendertexture_mapcoordstopixel_UU2(self : Void*, point : Void*, result : Void*)
  fun sfml_rendertexture_mapcoordstopixel_UU2DDi(self : Void*, point : Void*, view : Void*, result : Void*)
  fun sfml_rendertexture_draw_46svgvu9wmi4(self : Void*, vertices : Void*, vertex_count : LibC::SizeT, type : LibC::Int, states : Void*)
  fun sfml_rendertexture_draw_U2Dmi4(self : Void*, vertex_buffer : Void*, states : Void*)
  fun sfml_rendertexture_draw_U2Dvgvvgvmi4(self : Void*, vertex_buffer : Void*, first_vertex : LibC::SizeT, vertex_count : LibC::SizeT, states : Void*)
  fun sfml_rendertexture_pushglstates(self : Void*)
  fun sfml_rendertexture_popglstates(self : Void*)
  fun sfml_rendertexture_resetglstates(self : Void*)
  fun sfml_renderwindow_allocate(result : Void**)
  fun sfml_renderwindow_free(self : Void*)
  fun sfml_renderwindow_initialize(self : Void*)
  fun sfml_renderwindow_initialize_wg0bQssaLFw4(self : Void*, mode : Void*, title_size : LibC::SizeT, title : Char*, style : UInt32, settings : Void*)
  fun sfml_renderwindow_initialize_rLQFw4(self : Void*, handle : WindowHandle, settings : Void*)
  fun sfml_renderwindow_finalize(self : Void*)
  fun sfml_renderwindow_getsize(self : Void*, result : Void*)
  fun sfml_renderwindow_issrgb(self : Void*, result : Bool*)
  fun sfml_renderwindow_setactive_GZq(self : Void*, active : Bool, result : Bool*)
  fun sfml_renderwindow_capture(self : Void*, result : Void*)
  fun sfml_renderwindow_create_wg0bQssaL(self : Void*, mode : Void*, title_size : LibC::SizeT, title : Char*, style : UInt32)
  fun sfml_renderwindow_create_wg0bQssaLFw4(self : Void*, mode : Void*, title_size : LibC::SizeT, title : Char*, style : UInt32, settings : Void*)
  fun sfml_renderwindow_create_rLQ(self : Void*, handle : WindowHandle)
  fun sfml_renderwindow_create_rLQFw4(self : Void*, handle : WindowHandle, settings : Void*)
  fun sfml_renderwindow_close(self : Void*)
  fun sfml_renderwindow_getsettings(self : Void*, result : Void*)
  fun sfml_renderwindow_setverticalsyncenabled_GZq(self : Void*, enabled : Bool)
  fun sfml_renderwindow_setframeratelimit_emS(self : Void*, limit : LibC::UInt)
  fun sfml_renderwindow_display(self : Void*)
  fun sfml_renderwindow_clear_QVe(self : Void*, color : Void*)
  fun sfml_renderwindow_setview_DDi(self : Void*, view : Void*)
  fun sfml_renderwindow_getview(self : Void*, result : Void**)
  fun sfml_renderwindow_getdefaultview(self : Void*, result : Void**)
  fun sfml_renderwindow_getviewport_DDi(self : Void*, view : Void*, result : Void*)
  fun sfml_renderwindow_mappixeltocoords_ufV(self : Void*, point : Void*, result : Void*)
  fun sfml_renderwindow_mappixeltocoords_ufVDDi(self : Void*, point : Void*, view : Void*, result : Void*)
  fun sfml_renderwindow_mapcoordstopixel_UU2(self : Void*, point : Void*, result : Void*)
  fun sfml_renderwindow_mapcoordstopixel_UU2DDi(self : Void*, point : Void*, view : Void*, result : Void*)
  fun sfml_renderwindow_draw_46svgvu9wmi4(self : Void*, vertices : Void*, vertex_count : LibC::SizeT, type : LibC::Int, states : Void*)
  fun sfml_renderwindow_draw_U2Dmi4(self : Void*, vertex_buffer : Void*, states : Void*)
  fun sfml_renderwindow_draw_U2Dvgvvgvmi4(self : Void*, vertex_buffer : Void*, first_vertex : LibC::SizeT, vertex_count : LibC::SizeT, states : Void*)
  fun sfml_renderwindow_pushglstates(self : Void*)
  fun sfml_renderwindow_popglstates(self : Void*)
  fun sfml_renderwindow_resetglstates(self : Void*)
  fun sfml_renderwindow_isopen(self : Void*, result : Bool*)
  fun sfml_renderwindow_pollevent_YJW(self : Void*, event : Void*, result : Bool*)
  fun sfml_renderwindow_waitevent_YJW(self : Void*, event : Void*, result : Bool*)
  fun sfml_renderwindow_getposition(self : Void*, result : Void*)
  fun sfml_renderwindow_setposition_ufV(self : Void*, position : Void*)
  fun sfml_renderwindow_setsize_DXO(self : Void*, size : Void*)
  fun sfml_renderwindow_settitle_bQs(self : Void*, title_size : LibC::SizeT, title : Char*)
  fun sfml_renderwindow_seticon_emSemS843(self : Void*, width : LibC::UInt, height : LibC::UInt, pixels : UInt8*)
  fun sfml_renderwindow_setvisible_GZq(self : Void*, visible : Bool)
  fun sfml_renderwindow_setmousecursorvisible_GZq(self : Void*, visible : Bool)
  fun sfml_renderwindow_setmousecursorgrabbed_GZq(self : Void*, grabbed : Bool)
  fun sfml_renderwindow_setmousecursor_Voc(self : Void*, cursor : Void*)
  fun sfml_renderwindow_setkeyrepeatenabled_GZq(self : Void*, enabled : Bool)
  fun sfml_renderwindow_setjoystickthreshold_Bw9(self : Void*, threshold : LibC::Float)
  fun sfml_renderwindow_requestfocus(self : Void*)
  fun sfml_renderwindow_hasfocus(self : Void*, result : Bool*)
  fun sfml_renderwindow_getsystemhandle(self : Void*, result : WindowHandle*)
  fun sfml_renderwindow_createvulkansurface_M35HMp7QC(self : Void*, instance : Void*, surface : Void*, allocator : Void*, result : Bool*)
  fun sfml_shader_allocate(result : Void**)
  fun sfml_shader_free(self : Void*)
  fun sfml_shader_initialize(self : Void*)
  fun sfml_shader_finalize(self : Void*)
  fun sfml_shader_loadfromfile_zkCqL0(self : Void*, filename_size : LibC::SizeT, filename : LibC::Char*, type : LibC::Int, result : Bool*)
  fun sfml_shader_loadfromfile_zkCzkC(self : Void*, vertex_shader_filename_size : LibC::SizeT, vertex_shader_filename : LibC::Char*, fragment_shader_filename_size : LibC::SizeT, fragment_shader_filename : LibC::Char*, result : Bool*)
  fun sfml_shader_loadfromfile_zkCzkCzkC(self : Void*, vertex_shader_filename_size : LibC::SizeT, vertex_shader_filename : LibC::Char*, geometry_shader_filename_size : LibC::SizeT, geometry_shader_filename : LibC::Char*, fragment_shader_filename_size : LibC::SizeT, fragment_shader_filename : LibC::Char*, result : Bool*)
  fun sfml_shader_loadfrommemory_zkCqL0(self : Void*, shader_size : LibC::SizeT, shader : LibC::Char*, type : LibC::Int, result : Bool*)
  fun sfml_shader_loadfrommemory_zkCzkC(self : Void*, vertex_shader_size : LibC::SizeT, vertex_shader : LibC::Char*, fragment_shader_size : LibC::SizeT, fragment_shader : LibC::Char*, result : Bool*)
  fun sfml_shader_loadfrommemory_zkCzkCzkC(self : Void*, vertex_shader_size : LibC::SizeT, vertex_shader : LibC::Char*, geometry_shader_size : LibC::SizeT, geometry_shader : LibC::Char*, fragment_shader_size : LibC::SizeT, fragment_shader : LibC::Char*, result : Bool*)
  fun sfml_shader_loadfromstream_PO0qL0(self : Void*, stream : Void*, type : LibC::Int, result : Bool*)
  fun sfml_shader_loadfromstream_PO0PO0(self : Void*, vertex_shader_stream : Void*, fragment_shader_stream : Void*, result : Bool*)
  fun sfml_shader_loadfromstream_PO0PO0PO0(self : Void*, vertex_shader_stream : Void*, geometry_shader_stream : Void*, fragment_shader_stream : Void*, result : Bool*)
  fun sfml_shader_setparameter_zkCBw9(self : Void*, name_size : LibC::SizeT, name : LibC::Char*, x : LibC::Float)
  fun sfml_shader_setparameter_zkCBw9Bw9(self : Void*, name_size : LibC::SizeT, name : LibC::Char*, x : LibC::Float, y : LibC::Float)
  fun sfml_shader_setparameter_zkCBw9Bw9Bw9(self : Void*, name_size : LibC::SizeT, name : LibC::Char*, x : LibC::Float, y : LibC::Float, z : LibC::Float)
  fun sfml_shader_setparameter_zkCBw9Bw9Bw9Bw9(self : Void*, name_size : LibC::SizeT, name : LibC::Char*, x : LibC::Float, y : LibC::Float, z : LibC::Float, w : LibC::Float)
  fun sfml_shader_setparameter_zkCUU2(self : Void*, name_size : LibC::SizeT, name : LibC::Char*, vector : Void*)
  fun sfml_shader_setparameter_zkCNzM(self : Void*, name_size : LibC::SizeT, name : LibC::Char*, vector : Void*)
  fun sfml_shader_setparameter_zkCQVe(self : Void*, name_size : LibC::SizeT, name : LibC::Char*, color : Void*)
  fun sfml_shader_setparameter_zkCFPe(self : Void*, name_size : LibC::SizeT, name : LibC::Char*, transform : Void*)
  fun sfml_shader_setparameter_zkCDJb(self : Void*, name_size : LibC::SizeT, name : LibC::Char*, texture : Void*)
  fun sfml_shader_setparameter_zkCLcV(self : Void*, name_size : LibC::SizeT, name : LibC::Char*)
  fun sfml_shader_getnativehandle(self : Void*, result : LibC::UInt*)
  fun sfml_shader_bind_8P6(shader : Void*)
  fun sfml_shader_isavailable(result : Bool*)
  fun sfml_shader_isgeometryavailable(result : Bool*)
  fun sfml_sprite_allocate(result : Void**)
  fun sfml_sprite_finalize(self : Void*)
  fun sfml_sprite_free(self : Void*)
  fun sfml_sprite_initialize(self : Void*)
  fun sfml_sprite_initialize_DJb(self : Void*, texture : Void*)
  fun sfml_sprite_initialize_DJb2k1(self : Void*, texture : Void*, rectangle : Void*)
  fun sfml_sprite_settexture_DJbGZq(self : Void*, texture : Void*, reset_rect : Bool)
  fun sfml_sprite_settexturerect_2k1(self : Void*, rectangle : Void*)
  fun sfml_sprite_setcolor_QVe(self : Void*, color : Void*)
  fun sfml_sprite_gettexture(self : Void*, result : Void**)
  fun sfml_sprite_gettexturerect(self : Void*, result : Void*)
  fun sfml_sprite_getcolor(self : Void*, result : Void*)
  fun sfml_sprite_getlocalbounds(self : Void*, result : Void*)
  fun sfml_sprite_getglobalbounds(self : Void*, result : Void*)
  fun sfml_sprite_setposition_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float)
  fun sfml_sprite_setposition_UU2(self : Void*, position : Void*)
  fun sfml_sprite_setrotation_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_sprite_setscale_Bw9Bw9(self : Void*, factor_x : LibC::Float, factor_y : LibC::Float)
  fun sfml_sprite_setscale_UU2(self : Void*, factors : Void*)
  fun sfml_sprite_setorigin_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float)
  fun sfml_sprite_setorigin_UU2(self : Void*, origin : Void*)
  fun sfml_sprite_getposition(self : Void*, result : Void*)
  fun sfml_sprite_getrotation(self : Void*, result : LibC::Float*)
  fun sfml_sprite_getscale(self : Void*, result : Void*)
  fun sfml_sprite_getorigin(self : Void*, result : Void*)
  fun sfml_sprite_move_Bw9Bw9(self : Void*, offset_x : LibC::Float, offset_y : LibC::Float)
  fun sfml_sprite_move_UU2(self : Void*, offset : Void*)
  fun sfml_sprite_rotate_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_sprite_scale_Bw9Bw9(self : Void*, factor_x : LibC::Float, factor_y : LibC::Float)
  fun sfml_sprite_scale_UU2(self : Void*, factor : Void*)
  fun sfml_sprite_gettransform(self : Void*, result : Void*)
  fun sfml_sprite_getinversetransform(self : Void*, result : Void*)
  fun sfml_sprite_draw_kb9RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_sprite_draw_fqURoT(self : Void*, target : Void*, states : Void*)
  fun sfml_sprite_draw_Xk1RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_sprite_initialize_8xu(self : Void*, copy : Void*)
  fun sfml_text_allocate(result : Void**)
  fun sfml_text_finalize(self : Void*)
  fun sfml_text_free(self : Void*)
  fun sfml_text_initialize(self : Void*)
  fun sfml_text_initialize_bQs7CFemS(self : Void*, string_size : LibC::SizeT, string : Char*, font : Void*, character_size : LibC::UInt)
  fun sfml_text_setstring_bQs(self : Void*, string_size : LibC::SizeT, string : Char*)
  fun sfml_text_setfont_7CF(self : Void*, font : Void*)
  fun sfml_text_setcharactersize_emS(self : Void*, size : LibC::UInt)
  fun sfml_text_setlinespacing_Bw9(self : Void*, spacing_factor : LibC::Float)
  fun sfml_text_setletterspacing_Bw9(self : Void*, spacing_factor : LibC::Float)
  fun sfml_text_setstyle_saL(self : Void*, style : UInt32)
  fun sfml_text_setcolor_QVe(self : Void*, color : Void*)
  fun sfml_text_setfillcolor_QVe(self : Void*, color : Void*)
  fun sfml_text_setoutlinecolor_QVe(self : Void*, color : Void*)
  fun sfml_text_setoutlinethickness_Bw9(self : Void*, thickness : LibC::Float)
  fun sfml_text_getstring(self : Void*, result : Char**)
  fun sfml_text_getfont(self : Void*, result : Void**)
  fun sfml_text_getcharactersize(self : Void*, result : LibC::UInt*)
  fun sfml_text_getletterspacing(self : Void*, result : LibC::Float*)
  fun sfml_text_getlinespacing(self : Void*, result : LibC::Float*)
  fun sfml_text_getstyle(self : Void*, result : UInt32*)
  fun sfml_text_getcolor(self : Void*, result : Void*)
  fun sfml_text_getfillcolor(self : Void*, result : Void*)
  fun sfml_text_getoutlinecolor(self : Void*, result : Void*)
  fun sfml_text_getoutlinethickness(self : Void*, result : LibC::Float*)
  fun sfml_text_findcharacterpos_vgv(self : Void*, index : LibC::SizeT, result : Void*)
  fun sfml_text_getlocalbounds(self : Void*, result : Void*)
  fun sfml_text_getglobalbounds(self : Void*, result : Void*)
  fun sfml_text_setposition_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float)
  fun sfml_text_setposition_UU2(self : Void*, position : Void*)
  fun sfml_text_setrotation_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_text_setscale_Bw9Bw9(self : Void*, factor_x : LibC::Float, factor_y : LibC::Float)
  fun sfml_text_setscale_UU2(self : Void*, factors : Void*)
  fun sfml_text_setorigin_Bw9Bw9(self : Void*, x : LibC::Float, y : LibC::Float)
  fun sfml_text_setorigin_UU2(self : Void*, origin : Void*)
  fun sfml_text_getposition(self : Void*, result : Void*)
  fun sfml_text_getrotation(self : Void*, result : LibC::Float*)
  fun sfml_text_getscale(self : Void*, result : Void*)
  fun sfml_text_getorigin(self : Void*, result : Void*)
  fun sfml_text_move_Bw9Bw9(self : Void*, offset_x : LibC::Float, offset_y : LibC::Float)
  fun sfml_text_move_UU2(self : Void*, offset : Void*)
  fun sfml_text_rotate_Bw9(self : Void*, angle : LibC::Float)
  fun sfml_text_scale_Bw9Bw9(self : Void*, factor_x : LibC::Float, factor_y : LibC::Float)
  fun sfml_text_scale_UU2(self : Void*, factor : Void*)
  fun sfml_text_gettransform(self : Void*, result : Void*)
  fun sfml_text_getinversetransform(self : Void*, result : Void*)
  fun sfml_text_draw_kb9RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_text_draw_fqURoT(self : Void*, target : Void*, states : Void*)
  fun sfml_text_draw_Xk1RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_text_initialize_clM(self : Void*, copy : Void*)
  fun sfml_vertexbuffer_allocate(result : Void**)
  fun sfml_vertexbuffer_free(self : Void*)
  fun sfml_vertexbuffer_initialize(self : Void*)
  fun sfml_vertexbuffer_initialize_u9w(self : Void*, type : LibC::Int)
  fun sfml_vertexbuffer_initialize_9vK(self : Void*, usage : LibC::Int)
  fun sfml_vertexbuffer_initialize_u9w9vK(self : Void*, type : LibC::Int, usage : LibC::Int)
  fun sfml_vertexbuffer_finalize(self : Void*)
  fun sfml_vertexbuffer_create_vgv(self : Void*, vertex_count : LibC::SizeT, result : Bool*)
  fun sfml_vertexbuffer_getvertexcount(self : Void*, result : LibC::SizeT*)
  fun sfml_vertexbuffer_update_46s(self : Void*, vertices : Void*, result : Bool*)
  fun sfml_vertexbuffer_update_46svgvemS(self : Void*, vertices : Void*, vertex_count : LibC::SizeT, offset : LibC::UInt, result : Bool*)
  fun sfml_vertexbuffer_update_U2D(self : Void*, vertex_buffer : Void*, result : Bool*)
  fun sfml_vertexbuffer_swap_8jC(self : Void*, right : Void*)
  fun sfml_vertexbuffer_getnativehandle(self : Void*, result : LibC::UInt*)
  fun sfml_vertexbuffer_setprimitivetype_u9w(self : Void*, type : LibC::Int)
  fun sfml_vertexbuffer_getprimitivetype(self : Void*, result : LibC::Int*)
  fun sfml_vertexbuffer_setusage_9vK(self : Void*, usage : LibC::Int)
  fun sfml_vertexbuffer_getusage(self : Void*, result : LibC::Int*)
  fun sfml_vertexbuffer_bind_Kfe(vertex_buffer : Void*)
  fun sfml_vertexbuffer_isavailable(result : Bool*)
  fun sfml_vertexbuffer_draw_kb9RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_vertexbuffer_draw_fqURoT(self : Void*, target : Void*, states : Void*)
  fun sfml_vertexbuffer_draw_Xk1RoT(self : Void*, target : Void*, states : Void*)
  fun sfml_vertexbuffer_initialize_U2D(self : Void*, copy : Void*)
  fun sfml_graphics_version(LibC::Int*, LibC::Int*, LibC::Int*)
end
